# -*- encoding: utf-8 -*-
from django.http import HttpResponse,HttpResponseRedirect
from django.contrib.auth.decorators import login_required
from django.contrib.sessions.models import Session
from django.core.urlresolvers import reverse
from django.shortcuts import resolve_url
from django.contrib.auth import (REDIRECT_FIELD_NAME, login as auth_login,logout as auth_logout, get_user_model, update_session_auth_hash)
from django.template.response import TemplateResponse
from django.utils.translation import ugettext as _
from django.shortcuts import render_to_response,RequestContext
from django.contrib.auth import get_user_model
from django.contrib.auth import login,logout
from django.template import loader, Context
from django.template.context import RequestContext
from django.utils import timezone
from accounts.models import MyUser,MyUserForm
from resume.models import Resume
from resume.views import receive_middle
from side.models import Interview
from talents.models import Position
from django.contrib import auth
from django.db.models import Q,F
from uuslug import slugify
from talents.views import inspectiontime
from django.utils.timezone import now,timedelta
import codecs
import re
from accounts.forms import ChangepwdForm,LoginForm
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

class LoginBackend(object):
    def authenticate(self,username=None, password=None, **kwargs):
        UserModel = get_user_model()
    
        if username:
            #email
            if re.match("^.+\\@(\\[?)[a-zA-Z0-9\\-\\.]+\\.([a-zA-Z]{2,3}|[0-9]{1,3})(\\]?)$", username) != None:
                try:
                    user = UserModel.objects.get(email=username)
                    if user.check_password(password):
                        return user
                except UserModel.DoesNotExist:
                    return None
            #mobile
            elif len(username)==11 and re.match("^(1[3458]\d{9})$", username) != None:
                try:
                    user = UserModel.objects.get(mobile=username)
                    if user.check_password(password):
                        return user
                except UserModel.DoesNotExist:
                    return None
        else:
            return None

    def get_user(self, user_id):
        UserModel = get_user_model()
        try:
            return UserModel.objects.get(pk=user_id)
        except UserModel.DoesNotExist:
            return None
                
def alogin(request):
    errors= []
    account=None
    password=None
    if request.method == 'POST' :
        if not request.POST.get('account'):
            errors.append('账户不能为空')
        else:
            account = request.POST.get('account')
        if not request.POST.get('password'):
            errors.append('请输入密码')
        else:
            password= request.POST.get('password')
        if account is not None and password is not None :
            user = auth.authenticate(username=account,password=password)
            if user is not None:
                if user.is_active:
                    auth.login(request,user)
                    receive_middle()
                    return HttpResponseRedirect('/')
                else:
                    errors.append('账户已禁用')
            else :
                errors.append('无效的用户名或密码')
                
    return render_to_response('login.html', {'errors': errors})

def login(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)  
        if form.is_valid():  
            username = request.POST.get('username', '')  
            password = request.POST.get('password', '')  
            user = auth.authenticate(username=username, password=password)  
            if user is not None and user.is_active:  
                auth.login(request, user)  
                return render_to_response('/', RequestContext(request))  
            else:  
                return render_to_response('login', RequestContext(request, {'form': form,'password_is_wrong':True}))  
        else:  
            return render_to_response('login', RequestContext(request, {'form': form,}))
    else:
        form = LoginForm()  
        return render_to_response('login', RequestContext(request, {'form': form,}))

def register(request):
    errors= []
    account=None
    password=None
    password2=None
    email=None
    CompareFlag=False
    mobile = None
    rule = None

    if request.method == 'POST':
        if not request.POST.get('account'):
            errors.append('请输入用户名')
        else:
            account = request.POST.get('account')
            temp_user3 = MyUser.objects.filter(username=account)
            if len(temp_user3) != 0:
                errors.append('该用户名已注册')
        if not request.POST.get('password'):
            errors.append('请输入密码')
        else:
            password = request.POST.get('password')
        if not request.POST.get('password2'):
            errors.append('请再次输入密码')
        else:
            password2 = request.POST.get('password2')
        if not request.POST.get('email'):
            errors.append('请输入邮箱')
        else:
            email = request.POST.get('email')
            temp_user1 = MyUser.objects.filter(email=email)
            if len(temp_user1) != 0:
                errors.append('该邮箱已注册')
        if not request.POST.get('mobile'):
            errors.append('请输入手机号')
        else:
            mobile = request.POST.get('mobile')   
            temp_user2 = MyUser.objects.filter(mobile=mobile)
            if len(temp_user2) != 0:
                errors.append('该手机号已注册')
        if not request.POST.get('rule'):
            errors.append('请选择职位')
        else:
            rule = request.POST.get('rule')
            
        if password is not None and password2 is not None:
            if password == password2:
                CompareFlag = True
            else :
                errors.append('两次输入的密码不一致')


        if account is not None and password is not None and password2 is not None and email is not None and mobile is not None and rule is not None and CompareFlag and len(temp_user1) == 0 and len(temp_user2) == 0 and len(temp_user3) == 0:  
            now = timezone.now()            
            user = MyUser(username=account,last_login=now,date_joined=now,email=email)
            user.is_active = True
            user.set_password(password)
            user.mobile = str(mobile)
            user.rule = rule
            user.save()
            add()
            return HttpResponseRedirect('/accounts/login')
            

    return render_to_response('register.html', {'errors': errors,'account':account,'email':email,'mobile':mobile,})

def alogout(request):
    logout(request)
    return HttpResponseRedirect('/')

@login_required    
def index(request):
    renli=False
    secondrule=False
    UserModel = get_user_model()
    session_id = request.COOKIES['sessionid']
    user_id = Session.objects.get(session_key=session_id).get_decoded().get('_auth_user_id')
    user = UserModel.objects.get(id = user_id)
    positions=Position.objects.filter(UserID=user_id).filter(Filing=0)
    handlepositions=Position.objects.filter(Approver=user_id,Filing=2).filter(States=u"未处理")
    amount=len(handlepositions)
    handleingposition=Position.objects.filter(UserID=user_id,Filing=2)
    handleing=len(handleingposition)
    inters1 = Resume.objects.filter(Status=u"未处理")
    inters = inters1.filter(Q(UserID=user_id,Agency=None)|Q(Agency=user_id))
    inters2 = Interview.objects.filter(Q(resume__Status=u"一面",InterviewProcess=u"电话面试") | Q(resume__Status=u"二面",InterviewProcess=u"一面")| Q(resume__Status=u"三面",InterviewProcess=u"二面")).filter(Q(NextUser=user_id,resume__Agency=None)|Q(resume__Agency=user_id)).filter(lockuser=F('resume__UserID'))
    length=len(inters)+len(inters2)
    Task=amount+length
    staffs = Resume.objects.filter(Status=u"发offer")
    stalength=len(staffs)
    if user.rule==u"人力经理" or user.rule==u"人力助理" or user.username==u"admin":
                renli = True
    if user.rule==u"二级部门经理":
        secondrule=True
    inspectiontime()
    t = loader.get_template("index.html")
    c = Context({'handleing':handleing,'member' : user,'length':length,'positions':positions,'renli':renli,'amount':amount,'secondrule':secondrule,'Task':Task,'stalength':stalength})
    return HttpResponse(t.render(c))

def add():
    with codecs.open(r'/home/resume/project/media/TMP/station_name.js', 'r', 'UTF-8') as file:
                            content = file.read()
    with codecs.open(r'/home/resume/project/media/TMP/favorite_name.js', 'r', 'UTF-8') as file:
                            content1 = file.read()
    Pos = content.find("'@")
    Pos1 = content1.find("'@")
    pos = content.find("';")
    pos1 = content1.find("';")
    users = MyUser.objects.all()
    nams = "'"
    for user in users:
        if user.rule==u"总部门经理":
            a = "@1"
        elif user.rule==u"一级部门经理":
            a = "@2"
        elif user.rule==u"二级部门经理":
            a = "@3"
        elif user.rule==u"人力经理":
            a = "@4"
        elif user.rule==u"人力助理":
            a = "@5"
        else:
            a = "@6"
        r = slugify(user.username)
        nam = "|".join([a+r,user.username,""])
        nams += nam
    content = content[:Pos] + nams + content[pos:]
    content1 = content1[:Pos1] + nams + content1[pos1:]
    with codecs.open(r'/home/resume/project/media/TMP/station_name.js', 'w', 'UTF-8') as f:
                              f.write(content)
    with codecs.open(r'/home/resume/project/media/TMP/favorite_name.js', 'w', 'UTF-8') as f:
                              f.write(content1)

@login_required
def changepwd(request):  
    if request.method == 'GET':  
        form = ChangepwdForm()  
        return render_to_response('changepwd.html', RequestContext(request, {'form': form,}))
    else:  
        form = ChangepwdForm(request.POST)  
        if form.is_valid():  
            username = request.user.username  
            oldpassword = request.POST.get('oldpassword', '')  
            user = auth.authenticate(username=username, password=oldpassword)  
            if user is not None and user.is_active:  
                newpassword = request.POST.get('newpassword1', '')  
                user.set_password(newpassword)  
                user.save()  
                return render_to_response('login.html', RequestContext(request,{'changepwd_success':True}))
            else:  
                return render_to_response('changepwd.html', RequestContext(request, {'form': form,'oldpassword_is_wrong':True}))
        else:  
            return render_to_response('changepwd.html', RequestContext(request, {'form': form,}))


@login_required
def change_account(request):
    errors= []
    UserModel = get_user_model()
    session_id = request.COOKIES['sessionid']
    user_id = Session.objects.get(session_key=session_id).get_decoded().get('_auth_user_id')
    user = UserModel.objects.get(id = user_id)
    username = user.username
    email = user.email
    mobile = user.mobile
    rule = None
    if request.method == 'POST':
        username = request.POST.get('account')
        if len(username) == 0:
            errors.append('请输入用户名')
        else:
            temp_user3 = MyUser.objects.filter(username=username)
            if len(temp_user3) != 0 and username != user.username:
                errors.append('该用户名已注册')

        email = request.POST.get('email')
        if len(email) == 0: 
            errors.append('请输入邮箱')
        else:
            temp_user1 = MyUser.objects.filter(email=email)
            if len(temp_user1) != 0 and email != user.email:
                errors.append('该邮箱已注册')

        mobile = request.POST.get('mobile')
        if len(mobile) == 0:
            errors.append('请输入手机号')
        else:
            temp_user2 = MyUser.objects.filter(mobile=mobile)
            if len(temp_user2) != 0 and mobile != user.mobile:
                errors.append('该手机号已注册')

        if not request.POST.get('rule'):
            errors.append('请选择职位')
        else:
            rule = request.POST.get('rule')

        if len(username) != 0  and len(email) != 0 and len(mobile) != 0 and rule is not None:
            user.username = username
            user.email = email
            user.mobile = mobile
            user.rule = rule
            user.save()
            add()
            return render_to_response('change_account_done.html',RequestContext(request,{'change_account_success':True,}))
        else:
            return render_to_response('change_account.html',RequestContext(request,{'errors': errors,'username':username,'email':email,'mobile':mobile}))
    else:
        return render_to_response('change_account.html',RequestContext(request,{'username':username,'email':email,'mobile':mobile}))

